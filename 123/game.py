import os
os.chdir(os.path.dirname(os.path.abspath(__file__)))
import pygame


#Qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa th√∫ c∆∞ng
class Critter:
    def __init__(self, name):
        self.name = name
        self.hunger = 0
        self.boredom = 0
        pygame.mixer.init()


#th·ªùi gian tr√¥i qua
    def __pass_time(self):
        self.hunger += 1
        self.boredom += 1

# üçΩÔ∏è ƒÉn, üéÆ ch∆°i, üí§ ng·ªß
    def eat(self):
        self.hunger = max(0, self.hunger - 4)
        self.__pass_time()

    def play(self):
        self.boredom = max(0, self.boredom - 4)
        self.__pass_time()

    def sleep(self):
        self.hunger += 1  # Ng·ªß <=> +1 ƒê√≥i
        self.boredom = max(0, self.boredom - 2)
        self.__pass_time()

#Hi·ªÉn th·ªã tr·∫°ng th√°i
    def get_status(self):
        return f"T√™n: {self.name} | ƒê√≥i: {self.hunger} | Bu·ªìn ch√°n: {self.boredom}"

#Import giao di·ªán 
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk, ImageSequence


class CritterApp:
    def __init__(self, root): #Thi·∫øt k·∫ø giao di·ªán
        self.root = root
        self.root.title("Critter Caretaker")

        self.critter = None

        # Widgets
        self.name_label = tk.Label(root, text="Nh·∫≠p t√™n th√∫ c∆∞ng:")
        self.name_label.pack()

        self.name_entry = tk.Entry(root)
        self.name_entry.pack()

        self.create_button = tk.Button(root, text="T·∫°o", command=self.create_critter)
        self.create_button.pack(pady=5)

        self.feed_button = tk.Button(root, text="Cho ƒÉn", command=self.feed_critter)
        self.feed_button.pack(pady=2)

        self.play_button = tk.Button(root, text="Ch∆°i", command=self.play_with_critter)
        self.play_button.pack(pady=2)

        self.sleep_button = tk.Button(root, text="Ng·ªß", command=self.critter_sleep)
        self.sleep_button.pack(pady=2)

        self.status_label = tk.Label(root, text="Ch∆∞a c√≥ th√∫ n√†o ƒë∆∞·ª£c t·∫°o.")
        self.status_label.pack(pady=10)
        self.image_label = tk.Label(root)
        self.image_label.pack(pady=10)
# Load ·∫£nh m·∫∑c ƒë·ªãnh l√∫c ƒë·∫ßu (idle)
        self.load_gif("idle.gif")

#C√°c ho·∫°t ƒë·ªông
    def create_critter(self):
        name = self.name_entry.get().strip()
        if name:
            self.critter = Critter(name)
            self.update_status()
        else:
            messagebox.showwarning("L·ªói", "Vui l√≤ng nh·∫≠p t√™n!")
        self.load_gif("idle.gif")


    def feed_critter(self):
        if self.critter:
            self.critter.eat()
            self.update_status()
            self.play_sound("eating.wav")
        else:
            self.show_error()
        self.load_gif("eating.gif")
           

    def play_with_critter(self):
        if self.critter:
            self.critter.play()
            self.update_status()
            self.play_sound("playing.wav")
        else:
            self.show_error()
        self.load_gif("playing.gif")


    def critter_sleep(self):
        if self.critter:
            self.critter.sleep()
            self.update_status()
            self.play_sound("sleeping.wav")
        else:
            self.show_error()
        self.load_gif("sleeping.gif")


    def update_status(self):
        self.status_label.config(text=self.critter.get_status())

    def show_error(self):
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a t·∫°o th√∫ c∆∞ng!")

    def load_gif(self, path):
        self.frames = []
        self.delays = []  # Th√™m danh s√°ch l∆∞u th·ªùi gian delay gi·ªØa c√°c frame

        try:
            img = Image.open(path)
            for frame in ImageSequence.Iterator(img):
                duration = frame.info.get('duration', 100)  # ms, m·∫∑c ƒë·ªãnh 100ms n·∫øu kh√¥ng c√≥
                frame = frame.resize((150, 150))
                self.frames.append(ImageTk.PhotoImage(frame.copy()))
                self.delays.append(duration)
            self.current_frame = 0
            self.animate()
        except Exception as e:
            print("L·ªói khi load ·∫£nh GIF:", e)


    def animate(self):
        if self.frames:
            frame = self.frames[self.current_frame]
            delay = self.delays[self.current_frame]  # L·∫•y delay ƒë√∫ng v·ªõi frame
            self.image_label.config(image=frame)
            self.current_frame = (self.current_frame + 1) % len(self.frames)
            self.root.after(delay, self.animate)  # L·∫∑p l·∫°i theo th·ªùi gian delay c·ªßa t·ª´ng frame
    
    def play_sound(self, file):
        try:
            pygame.mixer.music.load(file)
            pygame.mixer.music.play()
        except Exception as e:
            print("Kh√¥ng th·ªÉ ph√°t √¢m thanh:", e)


#Ch·∫°y ch∆∞∆°ng tr√¨nh 
if __name__ == "__main__":
    root = tk.Tk()
    app = CritterApp(root)
    root.mainloop()


